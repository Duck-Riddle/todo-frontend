{"version":3,"sources":["hooks.ts","features/Tasks/Tasks.Slice.ts","features/Tasks/TaskForm.component.tsx","features/Tasks/Task.Component.tsx","features/Tasks/TasksList.Component.tsx","App.tsx","reportWebVitals.ts","api/api.url.ts","api/api.get.ts","api/api.post.ts","api/api.put.ts","api/api.delete.ts","features/Tasks/Tasks.Saga.ts","store.ts","theme.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","TasksSlice","createSlice","name","initialState","reducers","AsyncAddTask","reducer","state","action","prepare","txt","payload","done","timeStamp","Date","now","SyncPushTask","push","AsyncDelTask","taskIndex","findIndex","task","id","splice","err","console","log","AsyncToggleTaskDone","SyncTasks","Sort","sort","a","b","TestOverflow","actions","SelectTasks","tasks","useStyles","makeStyles","theme","createStyles","root","display","textField","marginLeft","spacing","margin","button","div","options","TaskForm","classes","dispatch","React","useState","overflow","setOverflow","setSort","input","setInput","className","noValidate","autoComplete","onSubmit","event","preventDefault","IconButton","color","disabled","onClick","warn","CloudUpload","FormControlLabel","control","Switch","checked","onChange","target","label","TextField","variant","value","fullWidth","Send","Task","props","index","ListItem","role","undefined","dense","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","ListItemText","primary","ListItemSecondaryAction","DeleteForever","TasksList","TasksTodo","List","map","App","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","url","fetchAll","axios","get","response","data","newTask","post","updateTaskDone","put","params","remove","delete","addTaskHandler","delTaskHandler","toggleTaskDoneHandler","HandleOverflow","onStartup","TasksSaga","call","select","filter","limit","length","i","resoult","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","TasksReducer","middleware","run","darkTheme","createTheme","palette","type","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.48cbe35a.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { TaskProps } from \"./Task.interface\";\r\nimport { RootState } from \"../../store\";\r\n\r\nconst initialState: TaskProps[] = []\r\n\r\nexport const TasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        AsyncAddTask: {\r\n            reducer: (state, action: PayloadAction<TaskProps>)=>{},\r\n            prepare: (txt: string) => {\r\n                return {\r\n                   payload: {\r\n                       txt,\r\n                       done: false,\r\n                       timeStamp: Date.now(),\r\n\r\n                   }\r\n                }\r\n            }\r\n        },\r\n        SyncPushTask: (state, action: PayloadAction<TaskProps>) => {\r\n            state.push(action.payload)\r\n        },\r\n\r\n        AsyncDelTask: (state, action: PayloadAction<string|undefined>)=>{\r\n            try {\r\n                const taskIndex = state.findIndex(task => task.id === action.payload)\r\n                state.splice(taskIndex, 1)\r\n            } catch(err) {\r\n                console.log(err)\r\n            }\r\n\r\n        },\r\n        AsyncToggleTaskDone: {\r\n            reducer: (state, action: PayloadAction<{id?:string, done?:boolean}>)=>{\r\n                const taskIndex = state.findIndex(task => task.id === action.payload.id)\r\n                state[taskIndex].done = action.payload.done !== null \r\n                    ? !action.payload.done\r\n                    : state[taskIndex].done\r\n            },\r\n            prepare: (id?:string, done?:boolean) => {\r\n                return {\r\n                    payload: {\r\n                        id,\r\n                        done\r\n                    }\r\n                }\r\n            }\r\n\r\n        },\r\n        SyncTasks: (state, action: PayloadAction<TaskProps[]>) => action.payload,\r\n        Sort: (state, action: PayloadAction<boolean>) => {\r\n            if (!action.payload) {\r\n                state.sort((a, b)=>{\r\n                    if (a.done===b.done) return 0\r\n                    if (a.done) return 1\r\n                    return -1\r\n                })\r\n            } else {\r\n                state.sort((a, b)=>{\r\n                    const timeStampA = a.timeStamp || 0\r\n                    const timeStampB = b.timeStamp || 0\r\n                    return timeStampA - timeStampB\r\n                })\r\n            }\r\n        },\r\n        TestOverflow: () => {}\r\n        \r\n    }\r\n})\r\n\r\nexport const {\r\n    AsyncAddTask,\r\n    SyncPushTask,\r\n    AsyncDelTask,\r\n    AsyncToggleTaskDone,\r\n    SyncTasks,\r\n    TestOverflow,\r\n    Sort } = TasksSlice.actions\r\n\r\nexport const SelectTasks = (state: RootState) => state.tasks\r\nexport default TasksSlice.reducer\r\n\r\n","import { makeStyles, TextField, Theme, createStyles, IconButton, Switch, FormControlLabel } from \"@material-ui/core\"\r\nimport { Send, CloudUpload } from \"@material-ui/icons\";\r\nimport React, { FC } from \"react\"\r\nimport { useAppDispatch } from \"../../hooks\"\r\nimport { AsyncAddTask, Sort, TestOverflow } from \"./Tasks.Slice\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(8),\r\n      margin: theme.spacing(2),\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(0),\r\n        margin: theme.spacing(2),\r\n    },\r\n    div: {\r\n        display: 'grid'\r\n    },\r\n    options: {\r\n        margin: theme.spacing(0),\r\n    },\r\n\r\n  }),\r\n);\r\n\r\n\r\n\r\nexport const TaskForm:FC = () => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useAppDispatch()\r\n\r\n    const [ overflow, setOverflow ] = React.useState(false)\r\n\r\n    const [ sort, setSort] = React.useState(false)\r\n    const handleSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSort(event.target.checked)\r\n        dispatch(Sort(sort))\r\n    }\r\n    const [ input, setInput ] = React.useState('')\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInput(event.target.value)\r\n    }\r\n    \r\n    return (\r\n        <form\r\n            className={classes.root}\r\n            noValidate \r\n            autoComplete=\"off\"\r\n            onSubmit={(event: React.SyntheticEvent)=>{\r\n                event.preventDefault()\r\n                if (input) dispatch(AsyncAddTask(input))\r\n                setInput('')\r\n            }}\r\n            >\r\n            <div className={classes.div}>\r\n            <IconButton\r\n                className={classes.options}\r\n                color=\"secondary\"\r\n                disabled={overflow}\r\n                onClick={()=>{\r\n                    setOverflow(true)\r\n                    dispatch(TestOverflow())\r\n                    console.warn(`You may need to refresh!`)\r\n                }}\r\n                >\r\n                <CloudUpload/>\r\n            </IconButton>\r\n            <FormControlLabel\r\n                className={classes.options}\r\n                control={<Switch\r\n                    checked={sort}\r\n                    onChange={handleSwitch}\r\n                    color='primary'\r\n                    />}\r\n                label=\"sortDone\"\r\n                />\r\n            </div>\r\n            <TextField\r\n                className={classes.textField}\r\n                label=\"Task-Todo\" \r\n                variant=\"outlined\"\r\n                value={input}\r\n                onChange={handleChange}\r\n                fullWidth\r\n                />\r\n            <IconButton\r\n                className={classes.button}\r\n                color=\"primary\"\r\n                onClick={()=>{\r\n                    if (input) dispatch(AsyncAddTask(input))\r\n                    setInput('')\r\n                }}\r\n                >\r\n                <Send/>\r\n            </IconButton>\r\n        </form>\r\n    )\r\n}","import { FC } from \"react\"\r\nimport { DeleteForever } from '@material-ui/icons'\r\nimport { \r\n    Checkbox,\r\n    IconButton,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText } from \"@material-ui/core\"\r\n\r\nimport { AsyncDelTask, AsyncToggleTaskDone } from \"./Tasks.Slice\"\r\nimport { useAppDispatch } from \"../../hooks\"\r\nimport { TaskProps } from \"./Task.interface\"\r\n\r\nexport const Task:FC<TaskProps> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n    let color: \"primary\"|\"secondary\" = \"secondary\"\r\n    if (props.index) {\r\n      if ((props.index+1) % 2 === 0) color = \"primary\"\r\n    }\r\n    return(\r\n      <ListItem\r\n            key={props.id} role={undefined}\r\n            dense button\r\n            onClick={()=>dispatch(AsyncToggleTaskDone(props.id, props.done))}\r\n            >\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={props.done}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                color={color}\r\n                inputProps={{ 'aria-labelledby': `checkbox-list-label-${props.id}` }}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText id={`checkbox-list-label-${props.id}`} primary={props.txt} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton \r\n                edge=\"end\" aria-label=\"DeleteTask\"\r\n                onClick={()=>{dispatch(AsyncDelTask(props.id))}}\r\n                >\r\n                <DeleteForever />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    )\r\n}","import { List } from \"@material-ui/core\";\r\nimport { FC } from \"react\";\r\n\r\nimport { useAppSelector } from \"../../hooks\"\r\nimport { Task } from \"./Task.Component\"\r\nimport { SelectTasks } from \"./Tasks.Slice\";\r\n\r\n\r\nexport const TasksList:FC = () =>{\r\n    \r\n    const TasksTodo = useAppSelector(SelectTasks)\r\n\r\n    return (\r\n        <List>\r\n            {TasksTodo.map(({txt, done, id, timeStamp}, index) => {\r\n                return (\r\n                    <Task \r\n                        key={index}\r\n                        index={index}\r\n                        txt={txt}\r\n                        done={done}\r\n                        id={id}\r\n                        timeStamp={timeStamp}/>\r\n                )\r\n            })}\r\n        </List>\r\n    )\r\n}","import { Container } from \"@material-ui/core\";\nimport { TaskForm } from \"./features/Tasks/TaskForm.component\";\nimport { TasksList } from \"./features/Tasks/TasksList.Component\";\n\nfunction App() {\n\n  return (\n    <Container maxWidth='md'>\n      < TaskForm />\n      < TasksList />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const url:string = 'https://todo-fullstack-portfolio.herokuapp.com'\r\nexport default url","import axios from 'axios'\r\nimport url from './api.url'\r\n\r\nexport const fetchAll = async (): Promise<any> => {\r\n    const response = await axios.get(`${url}/tasks`)\r\n    return response.data\r\n}\r\n\r\nexport const fetchOne = async (id:string): Promise<any> => {\r\n    const response = await axios.get(`${url}/tasks`,{\r\n        params:id\r\n    })\r\n    return response.data\r\n}\r\n","import axios from 'axios'\r\nimport url from './api.url'\r\nimport { TaskProps } from '../features/Tasks/Task.interface'\r\n\r\nexport const newTask = async (task: TaskProps ): Promise<any> => {\r\n    const response = await axios.post(`${url}/tasks`, task)\r\n    return response.data\r\n}","import axios from 'axios'\r\nimport url from './api.url'\r\n\r\nexport const updateTaskDone = async (id:string, done:boolean): Promise<any> => {\r\n    const response = await axios.put(`${url}/tasks/${id}`, {done}, {\r\n        params: id\r\n    })\r\n    return response.data\r\n}","import axios from 'axios'\r\nimport url from './api.url'\r\n\r\nexport const remove = async (id:string): Promise<any> => {\r\n    console.log(id)\r\n    const response = await axios.delete(`${url}/tasks/${id}`, {\r\n        params: id\r\n    })\r\n    return response.data\r\n}","import { PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { takeEvery, select, call, put } from \"redux-saga/effects\"\r\nimport { fetchAll, newTask, remove, updateTaskDone } from \"../../api\"\r\nimport { TaskProps } from \"./Task.interface\"\r\nimport { AsyncAddTask, AsyncDelTask, AsyncToggleTaskDone, SelectTasks, SyncPushTask, SyncTasks, TestOverflow } from \"./Tasks.Slice\"\r\n\r\nfunction* addTaskHandler(action:PayloadAction<TaskProps>) {\r\n    const task: TaskProps = yield call(newTask, action.payload)\r\n    yield put(SyncPushTask(task))\r\n}\r\n\r\nfunction* delTaskHandler(action:PayloadAction<string>) {\r\n    yield call(remove, action.payload)\r\n}\r\n\r\nfunction* toggleTaskDoneHandler(action:PayloadAction<{id:string, done:boolean}>) {\r\n    const state: TaskProps[] = yield select(SelectTasks)\r\n    console.log(...state.filter(({done})=>done))\r\n\r\n    try {\r\n        const {id, done} = action.payload\r\n        yield call(updateTaskDone, id, done)\r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nfunction* HandleOverflow() {\r\n    const state: TaskProps[] = yield select(SelectTasks)\r\n    const limit = 3000 - state.length\r\n    for (let i=1; i<=limit; i++) {\r\n        yield put(AsyncAddTask(`Test if app can handle overfow of 3000 tasks, id:${i}`))\r\n    }\r\n}\r\n\r\nfunction* onStartup() {\r\n    const resoult:TaskProps[] = yield call(fetchAll)\r\n    yield put(SyncTasks(resoult))\r\n\r\n}\r\n\r\n\r\nexport default function* TasksSaga() {\r\n    yield onStartup()\r\n    yield takeEvery( AsyncAddTask, addTaskHandler)\r\n    yield takeEvery( AsyncDelTask, delTaskHandler)\r\n    yield takeEvery( AsyncToggleTaskDone, toggleTaskDoneHandler)\r\n    yield takeEvery( TestOverflow, HandleOverflow)\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\"\r\n\r\nimport TasksReducer from \"./features/Tasks/Tasks.Slice\";\r\nimport TasksSaga from \"./features/Tasks/Tasks.Saga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: TasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n})\r\n\r\nsagaMiddleware.run(TasksSaga)\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport default store","import { createTheme } from \"@material-ui/core\";\r\n\r\nexport const darkTheme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    }\r\n    \r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport { darkTheme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline/>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}